{
  
    
        "post0": {
            "title": "Numpy - Numerical Python Library",
            "content": ". How to create an array wih certain data types, manipulating arrays, selecting elements from arrays, and loading dataset into an array. . import numpy as np import math . Array creation . a = np.array([1,2,3]) print(a) print(a.ndim) #Shows the array dimension . [1 2 3] 1 . We can make multi-dimensional array by making an array of arrays: . b = np.array([[1,2,3], [4,5,6]]) print(b) print(b.ndim) . [[1 2 3] [4 5 6]] 2 . We can try the length of each dimension (the matrix size?) using the shape attribute, which return a tuple: . b.shape . (2, 3) . We can check the types of items in the array using dtype: . b.dtype . dtype(&#39;int64&#39;) . Array can also take floats or strings: . c = np.array([3.2, 4.5,7.7,5]) # 5 will be converted into a float c.dtype.name print(c) . [3.2 4.5 7.7 5. ] . w = np.array([&#39;one&#39;, &#39;two&#39;, &#39;three&#39;]) print(w) w.dtype.name . [&#39;one&#39; &#39;two&#39; &#39;three&#39;] . &#39;str160&#39; . If we want to create the shape of an array but don&#39;t know which number to put in, we can ask Numpy to fill in with 0s or 1s, and even with random numbers! . d = np.zeros((2,3)) print(d) d.dtype . [[0. 0. 0.] [0. 0. 0.]] . dtype(&#39;float64&#39;) . e = np.ones((2,2)) print(e) . [[1. 1.] [1. 1.]] . np.random.rand(2,3) . array([[0.35359388, 0.29081185, 0.43913489], [0.99846144, 0.10830342, 0.88768546]]) . We can create a sequence of integers in an array using the arange function: arange(lower bound, ending bound, difference between consecutive numbers) . f = np.arange(10,20,2) print(f) . [10 12 14 16 18] . We can also generate a sequence of floats using the linspace function: linspace(lower bound, ending bound, number of floats generated) . np.linspace(0, 1, 10) . array([0. , 0.11111111, 0.22222222, 0.33333333, 0.44444444, 0.55555556, 0.66666667, 0.77777778, 0.88888889, 1. ]) . Array operations . We can do many mathematical operations on arrays, such as addition, subtraction, square, exponents) as well as boolean arrays. Linear algebra is also possible: matrix multiplication, product, transpose, inverse etc. . Arithmetic operators on arrays apply lengthwise. . a = np.array([10,20,30,40]) b = np.array([1,2,3,4]) c = a-b d = a*b print(c) print(d) . [ 9 18 27 36] [ 10 40 90 160] . Example: if I need to make 4 kinds of muffins and the recipes calls for tsp instead of grams. I want to know how many grams of sugar each muffin will have. Let&#39;s create an array of the different teaspoons of sugar for my 4 recipes: . teaspoons = np.array([15,10,6,21]) . Google says that 1 teaspoon equals 4 grams of sugar. Each recipe makes 6 muffins, so the conversion will be: . grams = (teaspoons * 4)/6 print(grams) . [10. 6.66666667 4. 14. ] . Now I know how many grams of sugar my muffins will have. I have a special diet, and I can&#39;t eat food containing more than 5gr of sugar. I can use the boolean array to return which muffins have less than 5g of sugar: . grams &lt; 5 . array([False, False, True, False]) . So I can eat one type of muffin, that&#39;s a relief! We can also check which muffins have an even number of grams of sugar (very important!): . grams%2 == 0 . array([ True, False, True, True]) . Two ways to do array multiplication: elementwise (use *) or a matrix product (use @) . A = np.array([[1,1],[0,1]]) B = np.array([[2,0],[3,4]]) print(A*B) ###elementwise multiplication . [[2 0] [0 4]] . print(A@B) . [[5 4] [3 4]] . If we work with array of different types, the resulting array&#39;s type will be the more general of the 2 types. This is &quot;upcasting&quot;. Ex: . array1 = np.array([[1,2,3,4],[3,4,5,6]]) array2 = np.array([[1.2,3.2,4.3,5.2],[3.5,6.3,2.4,5.4]]) print (array1.dtype) print(array2.dtype) . int64 float64 . array3 = array1 + array2 print(array3) print(array3.dtype) . [[ 2.2 5.2 7.3 9.2] [ 6.5 10.3 7.4 11.4]] float64 . Numpy has function to give the min, max, sum and mean: . print(array3.min()) print(array3.max()) print(array3.sum()) print(array3.mean()) . 2.2 11.4 59.5 7.4375 . For 2 dimensional arrays, we can do these operations for each row or column. Let&#39;s create an array with 12 elements, 3X4 . b = np.array(np.arange(1,13,1).reshape(3,4)) print(b) . [[ 1 2 3 4] [ 5 6 7 8] [ 9 10 11 12]] . Indexing, Slicing and iterating . Indexing . For a one-dimensional array, we simply use the offset index: . a = np.array([5,6,7,8,9]) a[2] . 7 . Fro multidimensional arrays, we enter an index with 2 numbers: the first representing the rows, the second the column: . b = np.array([[1,2],[3,4],[5,6]]) b . array([[1, 2], [3, 4], [5, 6]]) . b[2,1] . 6 . To get multiple numbers from the array, we make an array of the indexes: . np.array([b[0,0],b[1,0], b[2,1]]) . array([1, 3, 6]) . We can also do this by &quot;zipping&quot; the two lists of indexes together: . print(b[[0,1,2],[0,0,1]]) . [1 3 6] . Boolean indexing . Boolean indexing lets us select elements that respect a condition. Let&#39;s look at the elements that are greater than 3 in the matrix b: . print(b&gt;3) . [[False False] [False True] [ True True]] . We can then use this as a mask to obtain a one-dimensional array with only the values that respect the condition: . print(b[b&gt;3]) . [4 5 6] . This functionality is essential in the Pandas toolkit! . Slicing . Slicing is a way to create a sub-array based on an original array. For one-dimensional arrays, it works like a list.We use the : sign. For example, let&#39;s make a sub-array with the first three values of an original array: . a = np.array([1,2,3,4,5,6,7,8]) print(a[:3]) #Returns values from index 0 to index 2, so up to the last index . [1 2 3] . To return a subset of the array, we use two indexes: . print(a[2:5]) #Return values from index 2 to index 4 . [3 4 5] . It works similarly for multi-dimensional arrays. . a = np.array([[1,2,3,4],[5,6,7,8],[3,5,7,2]]) print(a) . [[1 2 3 4] [5 6 7 8] [3 5 7 2]] . The first slicing will select the rows: . print(a[:2]) . [[1 2 3 4] [5 6 7 8]] . print(a[2-3]) . [3 5 7 2] . To select rows and columns, we need to double slice it. The first argument selects the rows, the second selects the columns: . print(a[:2, 1:3]) . [[2 3] [6 7]] . A slice of the array is a view of the data. If we modify the sub-array, it will also modify the original array!!! For example, if I change the element at [0,0]: . sub_array = a[:2, 1:3] print(&quot;sub_array index [0,0] before change:&quot;, sub_array[0,0]) sub_array[0,0]=30 print(&quot;sub_array index [0,0] after change:&quot;, sub_array[0,0]) print(&quot;array index [0,1] after change:&quot;, a[0,1]) . sub_array index [0,0] before change: 30 sub_array index [0,0] after change: 30 array index [0,1] after change: 30 . To load a dataset in Numpy, we can use the function np.genfromtxt() where we specify the file name, delimiter(optional) number of rows to skip in case of headers. Example from class: wines = np.genfromtxt(&quot;datasets/winequality-red.csv&quot;, delimiter = &quot;;&quot;, skip_header = 1) .",
            "url": "https://marietkd.github.io/The-Deep-Learning-journal/fastpages/python/2022/08/16/_08_17_Numpy_notes.html",
            "relUrl": "/fastpages/python/2022/08/16/_08_17_Numpy_notes.html",
            "date": " • Aug 16, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "How to make a contribution in a GitHub repository using your terminal",
            "content": ". In a couple of months, Hacktoberfest 2022 will start. Hacktoberfest is a celebration of open source contribution for which you can get awesome swags. So let&#39;s practice to get ready! . You will need to signup for a GitHub account if you don&#39;t have one. . Fork the repository you want to contribute to . Go on the repository where you want to make a contribution and click on the grey &quot;Fork&quot; button on the top of the repository. This makes a copy of the repository in a new repository on your GitHub account. . Make the link between your new repository and your computer . Click on the &quot;Code&quot; button and copy the https (or the ssh if you have an ssh key) adress. In your terminal, write the following line: . git clone *paste the adress you copied here* . Work from your local copy . In your terminal, go into the new directory the cloning created: . cd *Name of the repository* . Don&#39;t forget this step: create a new branch! You shouldn&#39;t be working from the main branch! . Choose the name of the branch, and type: . git checkout -b *Name of your new branch* . Now you can open the file you want to modify in your IDE, make the modifications and save your work. . Stage and commit your modifications . Back in the terminal stage your changes: . git add *Name of the file you modified* . Then commit the file with a short description of your modification(s): . git commit -m &quot;Short description&quot; . And push your repository to GitHub: . git push origin *name of your branch* . Now, back to your GitHub repository to do the Pull Request! . In your forked repository, you now have a button saying &quot;Compare &amp; Pull Request&quot;! Click on it, it will open a new page where you can explain to the maintainers of the repository the changes you made. A brief but good description as well as a screenshot really help the maintainers to review your PR. You can also ask a question if you have any. . When you&#39;re done, you can click on the button underneath: &quot;Create Pull Request&quot;. . That&#39;s it! You created your first PR! Congratulations! 🎉 Now, you just have to wait for your PR to be reviewed and eventually merged. Be patient! . For more informations on how to contribute to Open Source, I recommend Eddie Jaoude YouTube Channel and their community EddieHub . Thank you for reading! You can find me on Twitter! .",
            "url": "https://marietkd.github.io/The-Deep-Learning-journal/github/2022/08/16/_07_30_How_to_contribute_to_Open_Source.html",
            "relUrl": "/github/2022/08/16/_07_30_How_to_contribute_to_Open_Source.html",
            "date": " • Aug 16, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Getting ready for Deep Learning for Coders",
            "content": ". . This past week, I started my Machine Learning journey, and more specifically, my Deep Learning journey. I started by watching the 3Blue 1Brown videos about Neural Networks which I found to be a very good introduction to Deep Learning. Then I remembered finding, about a year ago, the Fast.ai website. I went to revisit the website and found the course Deep Learning for Coders (part 1 and 2). Intrigued, I looked at the course introduction, and the learning method seemed interesting: a top to bottom approach, meaning that you start by training models and learn as you go. You don’t have to follow math courses for 2 years before starting. You only need a basic knowledge of coding (Python preferably). . I’m game! 🙂 . This doesn’t mean that there is no math. It doesn&#39;t mean that the coding is basic. It doesn’t mean that it will be easy. But it will be more applied than other courses. Here is what I learned from lesson 0, which explains how to use the course, and from visiting the website. . How to finish the course . It might seem like a weird advice. Why start a course about something you want to learn if you don’t plan to finish it. But the subject is challenging, and many people just drop out of it. . It is recommended to make yourself accountable by telling people about taking the course and about your projects. | Have a plan: when will you watch the lectures? Do the assignments? | Join the forum so you have a community helping you when you’re stuck. | If you need more coding knowledge, consider watching the CS50 and the Missing Semester videos on YouTube. | It will take tenacity: you may meet some obstacles, you may have to stop for a while, but make sure to come back as soon as possible. | . How to do well in the course . This is a very challenging course. One lecture may take more than one week. Remember that your ultimate goal isn&#39;t to finish the course in record time, it&#39;s to get as much knowledge as you can from it! . Watch the lecture and/or read the corresponding chapter of the book. . Note: You can read the book for free as a Jupiter Notebook here or buy it here. | Run the Jupiter notebook and play with it (the course explains the different platforms you can use to run the notebooks including free ones). Experiment with the code: try to change values or the order of the lines, for example. | Then reproduce the code on a new notebook, from scratch. . Note: You may have to go through these three steps more than once. | Repeat with a different set of data. | Ask questions. You may think that your question is stupid, but it will surely be useful to many people including you, of course. | Start a great project and publish it! Now, it doesn’t have to save the world to be great. It can be something pretty small. Or something more important. Your choice. | Connect with others . I&#39;ve already talked about the Fast.ai forum which I believe is an amazing tool. Being part of a community, especialy when studying something as challenging as Machine Learning, is vital. Here is a list of other places and ideas to meet fellow data scientists, stay motivated, learn and have fun: . Twitter, of course. Tech Twitter is my favorite place! There&#39;s a lot of great people wanting to connect and help. You can find me there as MarieTKD. | Kaggle: It is highly recommended to participate in the competitions, even though you will do terrible at first. 😆 You can make a team and work your way up the leadership. Kaggle also has a forum where you can ask questions and network. Reading posts from top Kagglers will help a lot. | Blogging, start a podcast, make videos, go live on Twitch... Teaching what you just learned will not only help others understand the concepts, but it will help you having a deeper understanding as well. Teaching is the best way to learn. It&#39;s also important when job hunting. Companies are looking to hire people with good communication skills! If you&#39;re not convinced, I recommend this article by Rachel Thomas, co-founder of Fast.ai. | . I truly hope this article will motivate you to start your own journey. . I also truly hope mine will go well. 😟 The only way to know, is to start! Will you join me? . Note: I used Google Colab to write this article. It was quite fun to do 🙂 .",
            "url": "https://marietkd.github.io/The-Deep-Learning-journal/fastpages/diary/2022/08/16/_04_18_Getting_ready_for_Deep_Learning_for_Coders.html",
            "relUrl": "/fastpages/diary/2022/08/16/_04_18_Getting_ready_for_Deep_Learning_for_Coders.html",
            "date": " • Aug 16, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "My diary - Week 2 - Fast.ai lesson 2",
            "content": "My diary - Week 2 - Fast.ai lesson 2 . Monday August 1 2022 . Today I tried to work on my spider classifier but realized that the data collected on the internet wouldn’t work: a lot of them are mislabeled. I might still do this classifier later by using a Kaggle dataset. In the meantime, I will change categories. I’ve thought about clouds, crocodile/aligator (but I would have the same problem). I looked briefly into healthy food, legume/vegetable… Hamster/Guinea pig would work well but it’s not very interesting. I’ll think about something else. . In my other courses, I learned about map, lambda and list comprehension in Python. I need to work more on it. . Tuesday August 2 2022 . I’m thinking about a new classifier to make. My idea for now is a model that would recognize different types of cartoon drawing style: Disney, Marvel, Ghibli. This would allow people to download their drawings and see what they are closest to. Maybe a 4th more realistic category could be nice. Maybe I could go with famous painters’ styles like Picasso, Van Gogh… This app could be fun. But I think I’ll stick with the cartoonish style. . In ML, I learned about linear regression and the cost function. I loved the representation of the cost function in different ways: . Wednesday August 3 2022 . No progress on my project today: I want to spend time reading Deep Learning for practical coders before going back to it. I’m still going for a drawing style classifier. Sounds like something my family and friends could enjoy. . I spent some time studying Numpy and taking notes on a Colab notebook. Someone on Twitter was interested in seeing it so I’ll post it here. Jupiter Notebooks are perfect for taking notes on programming courses! And being able to, very easily, turn it into a blog post is the cherry on top! . In the ML course, I’ve started learning about gradient descent. I like how my courses crosses so the same topics are taught in different ways. . Thursday August 4 2022 . Not a lot of time to work on classes today, but I finsihed reading ch.2 of Deep Learning for practical coders. Lots of interesting things about making a dataset and end to end production. I’ll try to work on my project tomorrow. I might start looking into Kaggle competition too. . Friday August 5 2022 . I made some progress with my ‘drawing styles’ classifier. I chose 4 categories: Ghibli drawings, Marvel drawings, Disney drawings and chibi drawings. I made a dataset by downloading images from Duck Duck Go. I also removed the ones with broken links. I’m excited to keep working on it this WE. The next step is the DataLoaders! . I’ve also decided to nake meal plans and completely schedule my days. I might do a schedule for a week and review the priorities each morning. It worked well today and allowed me to do all the things that were important. .",
            "url": "https://marietkd.github.io/The-Deep-Learning-journal/markdown/2022/08/02/my-diary.html",
            "relUrl": "/markdown/2022/08/02/my-diary.html",
            "date": " • Aug 2, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "My diary - Week 1 - Fast.ai lesson 2",
            "content": "Week 1 - Fast.ai lesson 2 . Saturday July 30 2022 - PyOhio . Today was my first Python conference. I really enjoyed the presentation about Flappy Bird AI. The author used a genetic algorithm to make the bird fly by himself. This algorithm looks very interesting, I plan to learn more about it. Here the repository: https://github.com/anaypant/anaypant.github.io . Sunday July 31 2022 . Today I started a new DL project: a spider classifier. I’m using lesson 2 from Fast.ai and my previous notebook “Is it a hedgehog?”. The goal is to put this model to production using Gradio. You will be able to download a picture of spider and it will give the probability that it’s a black widow. I plan to include 4 other types of spiders ressembling the black widow spider. I will select the photos using the scientific name of these spiders, to avoid too many mislabeled pictures. . . I also started 2 new courses: Introduction to data science in Python (Coursera) and Supervised machine learning : regression and classification (Coursera as well). Lots of work but it’s worth it! .",
            "url": "https://marietkd.github.io/The-Deep-Learning-journal/diary/2022/07/30/start-journaling.html",
            "relUrl": "/diary/2022/07/30/start-journaling.html",
            "date": " • Jul 30, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://marietkd.github.io/The-Deep-Learning-journal/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://marietkd.github.io/The-Deep-Learning-journal/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://marietkd.github.io/The-Deep-Learning-journal/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://marietkd.github.io/The-Deep-Learning-journal/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}